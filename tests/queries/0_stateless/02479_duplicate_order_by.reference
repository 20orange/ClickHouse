-- Disable optimize_duplicate_order_by_and_distinct
-- ORDER BY(s) in subqueries are untouched
QUERY id: 0
  PROJECTION COLUMNS
    number UInt64
  PROJECTION
    LIST id: 1, nodes: 1
      COLUMN id: 2, column_name: number, result_type: UInt64, source_id: 3
  JOIN TREE
    QUERY id: 3, is_subquery: 1
      PROJECTION COLUMNS
        number UInt64
      PROJECTION
        LIST id: 4, nodes: 1
          COLUMN id: 5, column_name: number, result_type: UInt64, source_id: 6
      JOIN TREE
        QUERY id: 6, is_subquery: 1
          PROJECTION COLUMNS
            number UInt64
          PROJECTION
            LIST id: 7, nodes: 1
              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9
          JOIN TREE
            TABLE_FUNCTION id: 9, table_function_name: numbers
              ARGUMENTS
                LIST id: 10, nodes: 1
                  CONSTANT id: 11, constant_value: UInt64_3, constant_value_type: UInt8
          ORDER BY
            LIST id: 12, nodes: 1
              SORT id: 13, sort_direction: ASCENDING, with_fill: 0
                EXPRESSION
                  COLUMN id: 14, column_name: number, result_type: UInt64, source_id: 9
      ORDER BY
        LIST id: 15, nodes: 1
          SORT id: 16, sort_direction: DESCENDING, with_fill: 0
            EXPRESSION
              COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 6
  ORDER BY
    LIST id: 18, nodes: 1
      SORT id: 19, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 3
-- Enable optimize_duplicate_order_by_and_distinct
-- ORDER BY eliminates ORDER BY(s) in subqueries
QUERY id: 0
  PROJECTION COLUMNS
    number UInt64
  PROJECTION
    LIST id: 1, nodes: 1
      COLUMN id: 2, column_name: number, result_type: UInt64, source_id: 3
  JOIN TREE
    QUERY id: 3, is_subquery: 1
      PROJECTION COLUMNS
        number UInt64
      PROJECTION
        LIST id: 4, nodes: 1
          COLUMN id: 5, column_name: number, result_type: UInt64, source_id: 6
      JOIN TREE
        QUERY id: 6, is_subquery: 1
          PROJECTION COLUMNS
            number UInt64
          PROJECTION
            LIST id: 7, nodes: 1
              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9
          JOIN TREE
            TABLE_FUNCTION id: 9, table_function_name: numbers
              ARGUMENTS
                LIST id: 10, nodes: 1
                  CONSTANT id: 11, constant_value: UInt64_3, constant_value_type: UInt8
  ORDER BY
    LIST id: 12, nodes: 1
      SORT id: 13, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 14, column_name: number, result_type: UInt64, source_id: 3
-- GROUP BY eliminates ORDER BY in _all_ subqueries
QUERY id: 0
  PROJECTION COLUMNS
    number UInt64
  PROJECTION
    LIST id: 1, nodes: 1
      COLUMN id: 2, column_name: number, result_type: UInt64, source_id: 3
  JOIN TREE
    QUERY id: 3, is_subquery: 1
      PROJECTION COLUMNS
        number UInt64
      PROJECTION
        LIST id: 4, nodes: 1
          COLUMN id: 5, column_name: number, result_type: UInt64, source_id: 6
      JOIN TREE
        QUERY id: 6, is_subquery: 1
          PROJECTION COLUMNS
            number UInt64
          PROJECTION
            LIST id: 7, nodes: 1
              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9
          JOIN TREE
            TABLE_FUNCTION id: 9, table_function_name: numbers
              ARGUMENTS
                LIST id: 10, nodes: 1
                  CONSTANT id: 11, constant_value: UInt64_3, constant_value_type: UInt8
  GROUP BY
    LIST id: 12, nodes: 1
      COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 3
-- GROUP BY with aggregation function which does NOT depend on order -> eliminate ORDER BY(s) in _all_ subqueries
QUERY id: 0
  PROJECTION COLUMNS
    sum(number) UInt64
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: sum, function_type: aggregate, result_type: UInt64
        ARGUMENTS
          LIST id: 3, nodes: 1
            COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5
  JOIN TREE
    QUERY id: 5, is_subquery: 1
      PROJECTION COLUMNS
        number UInt64
      PROJECTION
        LIST id: 6, nodes: 1
          COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
      JOIN TREE
        QUERY id: 8, is_subquery: 1
          PROJECTION COLUMNS
            number UInt64
          PROJECTION
            LIST id: 9, nodes: 1
              COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11
          JOIN TREE
            TABLE_FUNCTION id: 11, table_function_name: numbers
              ARGUMENTS
                LIST id: 12, nodes: 1
                  CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8
  GROUP BY
    LIST id: 14, nodes: 1
      COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5
-- GROUP BY with aggregation function which depends on order -> keep ORDER BY in first subquery, and eliminate in second subquery
QUERY id: 0
  PROJECTION COLUMNS
    any(number) UInt64
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: any, function_type: aggregate, result_type: UInt64
        ARGUMENTS
          LIST id: 3, nodes: 1
            COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5
  JOIN TREE
    QUERY id: 5, is_subquery: 1
      PROJECTION COLUMNS
        number UInt64
      PROJECTION
        LIST id: 6, nodes: 1
          COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
      JOIN TREE
        QUERY id: 8, is_subquery: 1
          PROJECTION COLUMNS
            number UInt64
          PROJECTION
            LIST id: 9, nodes: 1
              COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11
          JOIN TREE
            TABLE_FUNCTION id: 11, table_function_name: numbers
              ARGUMENTS
                LIST id: 12, nodes: 1
                  CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8
      ORDER BY
        LIST id: 14, nodes: 1
          SORT id: 15, sort_direction: DESCENDING, with_fill: 0
            EXPRESSION
              COLUMN id: 16, column_name: number, result_type: UInt64, source_id: 8
  GROUP BY
    LIST id: 17, nodes: 1
      COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5
-- check that optimization is applied recursively to subqueries as well
-- GROUP BY with aggregation function which does NOT depend on order -> eliminate ORDER BY in most inner subquery here
QUERY id: 0
  PROJECTION COLUMNS
    a UInt64
  PROJECTION
    LIST id: 1, nodes: 1
      COLUMN id: 2, column_name: a, result_type: UInt64, source_id: 3
  JOIN TREE
    QUERY id: 3, is_subquery: 1
      PROJECTION COLUMNS
        a UInt64
      PROJECTION
        LIST id: 4, nodes: 1
          FUNCTION id: 5, function_name: sum, function_type: aggregate, result_type: UInt64
            ARGUMENTS
              LIST id: 6, nodes: 1
                COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
      JOIN TREE
        QUERY id: 8, is_subquery: 1
          PROJECTION COLUMNS
            number UInt64
          PROJECTION
            LIST id: 9, nodes: 1
              COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11
          JOIN TREE
            TABLE_FUNCTION id: 11, table_function_name: numbers
              ARGUMENTS
                LIST id: 12, nodes: 1
                  CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8
      GROUP BY
        LIST id: 14, nodes: 1
          COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
  ORDER BY
    LIST id: 15, nodes: 1
      SORT id: 16, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 2, column_name: a, result_type: UInt64, source_id: 3
-- { echoOn }
SELECT '-- GROUP BY with aggregation function which depends on order -> keep ORDER BY in most inner subquery here';
-- GROUP BY with aggregation function which depends on order -> keep ORDER BY in most inner subquery here
EXPLAIN QUERY TREE run_passes = 1
SELECT a
FROM
(
    SELECT any(number) AS a
    FROM
    (
        SELECT *
        FROM numbers(3)
        ORDER BY number ASC
    )
    GROUP BY number
)
ORDER BY a ASC;
QUERY id: 0
  PROJECTION COLUMNS
    a UInt64
  PROJECTION
    LIST id: 1, nodes: 1
      COLUMN id: 2, column_name: a, result_type: UInt64, source_id: 3
  JOIN TREE
    QUERY id: 3, is_subquery: 1
      PROJECTION COLUMNS
        a UInt64
      PROJECTION
        LIST id: 4, nodes: 1
          FUNCTION id: 5, function_name: any, function_type: aggregate, result_type: UInt64
            ARGUMENTS
              LIST id: 6, nodes: 1
                COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
      JOIN TREE
        QUERY id: 8, is_subquery: 1
          PROJECTION COLUMNS
            number UInt64
          PROJECTION
            LIST id: 9, nodes: 1
              COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11
          JOIN TREE
            TABLE_FUNCTION id: 11, table_function_name: numbers
              ARGUMENTS
                LIST id: 12, nodes: 1
                  CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8
      GROUP BY
        LIST id: 14, nodes: 1
          COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
  ORDER BY
    LIST id: 15, nodes: 1
      SORT id: 16, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 2, column_name: a, result_type: UInt64, source_id: 3
