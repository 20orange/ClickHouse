#pragma once

#include <Parsers/IParserBase.h>

#include <cassert>
#include <string_view>

namespace DB
{

#define APPLY_FOR_PARSER_KEYWORDS(MR_MACROS) \
    MR_MACROS(ADD_COLUMN, "ADD COLUMN") \
    MR_MACROS(ADD_CONSTRAINT, "ADD CONSTRAINT") \
    MR_MACROS(ADD_INDEX, "ADD INDEX") \
    MR_MACROS(ADD_PROJECTION, "ADD PROJECTION") \
    MR_MACROS(ADD, "ADD") \
    MR_MACROS(AFTER, "AFTER") \
    MR_MACROS(ALIAS, "ALIAS") \
    MR_MACROS(ALL, "ALL") \
    MR_MACROS(ALTER_COLUMN, "ALTER COLUMN") \
    MR_MACROS(ALTER_DATABASE, "ALTER DATABASE") \
    MR_MACROS(ALTER_LIVE_VIEW, "ALTER LIVE VIEW") \
    MR_MACROS(ALTER_TABLE, "ALTER TABLE") \
    MR_MACROS(ALTER, "ALTER") \
    MR_MACROS(AND, "AND") \
    MR_MACROS(ANY, "ANY") \
    MR_MACROS(APPLY, "APPLY") \
    MR_MACROS(AS, "AS") \
    MR_MACROS(ASC, "ASC") \
    MR_MACROS(ASCENDING, "ASCENDING") \
    MR_MACROS(ATTACH_PART, "ATTACH PART") \
    MR_MACROS(ATTACH_PARTITION, "ATTACH PARTITION") \
    MR_MACROS(BETWEEN, "BETWEEN") \
    MR_MACROS(BOTH, "BOTH") \
    MR_MACROS(CASE, "CASE") \
    MR_MACROS(CAST, "CAST") \
    MR_MACROS(CLEAR_COLUMN, "CLEAR COLUMN") \
    MR_MACROS(CLEAR_INDEX, "CLEAR INDEX") \
    MR_MACROS(CLEAR_PROJECTION, "CLEAR PROJECTION") \
    MR_MACROS(CLUSTER, "CLUSTER") \
    MR_MACROS(CODEC, "CODEC") \
    MR_MACROS(COLLATE, "COLLATE") \
    MR_MACROS(COLUMNS, "COLUMNS") \
    MR_MACROS(COMMENT_COLUMN, "COMMENT COLUMN") \
    MR_MACROS(COMMENT, "COMMENT") \
    MR_MACROS(CREATE_TABLE, "CREATE TABLE") \
    MR_MACROS(CREATE_TEMPORARY_TABLE, "CREATE TEMPOORARY TABLE") \
    MR_MACROS(CURRENT_ROW, "CURRENT ROW") \
    MR_MACROS(D, "D") \
    MR_MACROS(DATE, "DATE") \
    MR_MACROS(DAY, "DAY") \
    MR_MACROS(DD, "DD") \
    MR_MACROS(DEFAULT, "DEFAULT") \
    MR_MACROS(DELETE, "DELETE") \
    MR_MACROS(DESC, "DESC") \
    MR_MACROS(DESCENDING, "DESCENDING") \
    MR_MACROS(DETACH_PART, "DETACH PART") \
    MR_MACROS(DETACH_PARTITION, "DETACH PARTITION") \
    MR_MACROS(DISTINCT, "DISTINCT") \
    MR_MACROS(DIV, "DIV") \
    MR_MACROS(DROP_COLUMN, "DROP COLUMN") \
    MR_MACROS(DROP_CONSTRAINT, "DROP CONSTRAINT") \
    MR_MACROS(DROP_DETACHED_PART, "DROP DETACHED PART") \
    MR_MACROS(DROP_DETACHED_PARTITION, "DROP DETACHED PARTITION") \
    MR_MACROS(DROP_INDEX, "DROP INDEX") \
    MR_MACROS(DROP_PART, "DROP PART") \
    MR_MACROS(DROP_PARTITION, "DROP PARTITION") \
    MR_MACROS(DROP_PROJECTION, "DROP PROJECTION") \
    MR_MACROS(DROP_TABLE, "DROP TABLE") \
    MR_MACROS(DROP_TEMPORARY_TABLE, "DROP TEMPORARY TABLE") \
    MR_MACROS(DROP, "DROP") \
    MR_MACROS(ELSE, "ELSE") \
    MR_MACROS(END, "END") \
    MR_MACROS(EPHEMERAL_SEQUENTIAL, "EPHEMERAL SEQUENTIAL") \
    MR_MACROS(EPHEMERAL, "EPHEMERAL") \
    MR_MACROS(EXCEPT, "EXCEPT") \
    MR_MACROS(FALSE_KEYWORD, "FALSE") /*The name differs from the value*/ \
    MR_MACROS(FETCH_PART, "FETCH PART") \
    MR_MACROS(FETCH_PARTITION, "FETCH PARTITION") \
    MR_MACROS(FILTER, "FILTER") \
    MR_MACROS(FIRST, "FIRST") \
    MR_MACROS(FOLLOWING, "FOLLOWING") \
    MR_MACROS(FOR, "FOR") \
    MR_MACROS(FREEZE, "FREEZE") \
    MR_MACROS(FROM, "FROM") \
    MR_MACROS(GLOBAL_IN, "GLOBAL IN") \
    MR_MACROS(GLOBAL_NOT_IN, "GLOBAL NOT IN") \
    MR_MACROS(GROUP_BY, "GROUP BY") \
    MR_MACROS(GROUPS, "GROUPS") \
    MR_MACROS(H, "H") \
    MR_MACROS(HH, "HH") \
    MR_MACROS(HOUR, "HOUR") \
    MR_MACROS(IF_EXISTS, "IF EXISTS") \
    MR_MACROS(IF_NOT_EXISTS, "IF NOT EXISTS") \
    MR_MACROS(IGNORE_NULLS, "IGNORE NULLS") \
    MR_MACROS(ILIKE, "ILIKE") \
    MR_MACROS(IN_PARTITION, "IN PARTITION") \
    MR_MACROS(IN, "IN") \
    MR_MACROS(INTERSECT, "INTERSECT") \
    MR_MACROS(INTERVAL, "INTERVAL") \
    MR_MACROS(IS_NOT_NULL, "IS NOT NULL") \
    MR_MACROS(IS_NULL, "IS NULL") \
    MR_MACROS(LAST, "LAST") \
    MR_MACROS(LEADING, "LEADING") \
    MR_MACROS(LIKE, "LIKE") \
    MR_MACROS(M, "M") \
    MR_MACROS(MATERIALIZE_COLUMN, "MATERIALIZE COLUMN") \
    MR_MACROS(MATERIALIZE_INDEX, "MATERIALIZE INDEX") \
    MR_MACROS(MATERIALIZE_PROJECTION, "MATERIALIZE PROJECTION") \
    MR_MACROS(MATERIALIZE_TTL, "MATERIALIZE TTL") \
    MR_MACROS(MATERIALIZE, "MATERIALIZE") \
    MR_MACROS(MATERIALIZED, "MATERIALIZED") \
    MR_MACROS(MCS, "MCS") \
    MR_MACROS(MI, "MI") \
    MR_MACROS(MICROSECOND, "MICROSECOND") \
    MR_MACROS(MILLISECOND, "MILLISECOND") \
    MR_MACROS(MINUTE, "MINUTE") \
    MR_MACROS(MM, "MM") \
    MR_MACROS(MOD, "MOD") \
    MR_MACROS(MODIFY_COLUMN, "MODIFY COLUMN") \
    MR_MACROS(MODIFY_COMMENT, "MODIFY COMMENT") \
    MR_MACROS(MODIFY_ORDER_BY, "MODIFY ORDER BY") \
    MR_MACROS(MODIFY_QUERY, "MODIFY QUERY") \
    MR_MACROS(MODIFY_SAMPLE_BY, "MODIFY SAMPLE BY") \
    MR_MACROS(MODIFY_SETTING, "MODIFY SETTING") \
    MR_MACROS(MODIFY_TTL, "MODIFY TTL") \
    MR_MACROS(MODIFY, "MODIFY") \
    MR_MACROS(MONTH, "MONTH") \
    MR_MACROS(MOVE_PART, "MOVE PART") \
    MR_MACROS(MOVE_PARTITION, "MOVE PARTITION") \
    MR_MACROS(MS, "MS") \
    MR_MACROS(N, "N") \
    MR_MACROS(NAME, "NAME") \
    MR_MACROS(NAMED_COLLECTION, "NAMED COLLECTION") \
    MR_MACROS(NANOSECOND, "NANOSECOND") \
    MR_MACROS(NOT_BETWEEN, "NOT BETWEEN") \
    MR_MACROS(NOT_ILIKE, "NOT ILIKE") \
    MR_MACROS(NOT_IN, "NOT IN") \
    MR_MACROS(NOT_LIKE, "NOT LIKE") \
    MR_MACROS(NOT, "NOT") \
    MR_MACROS(NS, "NS") \
    MR_MACROS(NULL_KEYWORD, "NULL KEYWORD") \
    MR_MACROS(NULLS, "NULLS") \
    MR_MACROS(ON, "ON") \
    MR_MACROS(OR, "OR") \
    MR_MACROS(ORDER_BY, "ORDER BY") \
    MR_MACROS(OVER, "OVER") \
    MR_MACROS(PARTITION_BY, "PARTITION BY") \
    MR_MACROS(PARTITION, "PARTITION") \
    MR_MACROS(PERSISTENT_SEQUENTIAL, "PERSISTENT SEQUENTIAL") \
    MR_MACROS(PERSISTENT, "PERSISTENT") \
    MR_MACROS(PRECEDING, "PRECEDING") \
    MR_MACROS(Q, "Q") \
    MR_MACROS(QQ, "QQ") \
    MR_MACROS(QUARTER, "QUARTER") \
    MR_MACROS(RANGE, "RANGE") \
    MR_MACROS(RECOMPRESS, "RECOMPRESS") \
    MR_MACROS(REFRESH, "REFRESH") \
    MR_MACROS(REGEXP, "REGEXP") \
    MR_MACROS(REMOVE_SAMPLE_BY, "REMOVE SAMPLE BY") \
    MR_MACROS(REMOVE_TTL, "REMOVE TTL") \
    MR_MACROS(REMOVE, "REMOVE") \
    MR_MACROS(RENAME_COLUMN, "RENAME COLUMN") \
    MR_MACROS(RENAME_TABLE, "RENAME TABLE") \
    MR_MACROS(REPLACE_PARTITION, "REPLACE PARTITION") \
    MR_MACROS(REPLACE, "REPLACE") \
    MR_MACROS(RESET_SETTING, "RESET SETTING") \
    MR_MACROS(RESPECT_NULLS, "RESPECT NULLS") \
    MR_MACROS(RESUME, "RESUME") \
    MR_MACROS(ROWS, "ROWS") \
    MR_MACROS(S, "S") \
    MR_MACROS(SECOND, "SECOND") \
    MR_MACROS(SET, "SET") \
    MR_MACROS(SETTINGS, "SETTINGS") \
    MR_MACROS(SQL_TSI_DAY, "SQL_TSI_DAY") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_HOUR, "SQL_TSI_HOUR") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_MICROSECOND, "SQL_TSI_MICROSECOND") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_MILLISECOND, "SQL_TSI_MILLISECOND") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_MINUTE, "SQL_TSI_MINUTE") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_MONTH, "SQL_TSI_MONTH") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_NANOSECOND, "SQL_TSI_NANOSECOND") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_QUARTER, "SQL_TSI_QUARTER") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_SECOND, "SQL_TSI_SECOND") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_WEEK, "SQL_TSI_WEEK") /*Underscore is intentional*/ \
    MR_MACROS(SQL_TSI_YEAR, "SQL_TSI_YEAR") /*Underscore is intentional*/ \
    MR_MACROS(SS, "SS") \
    MR_MACROS(STEP, "STEP") \
    MR_MACROS(STRICT, "STRICT") \
    MR_MACROS(SUSPEND, "SUSPEND") \
    MR_MACROS(TABLE, "TABLE") \
    MR_MACROS(THEN, "THEN") \
    MR_MACROS(TIMESTAMP, "TIMESTAMP") \
    MR_MACROS(TO_DISK, "TO DISK") \
    MR_MACROS(TO_SHARD, "TO SHARD") \
    MR_MACROS(TO_TABLE, "TO TABLE") \
    MR_MACROS(TO_VOLUME, "TO VOLUME") \
    MR_MACROS(TO, "TO") \
    MR_MACROS(TRAILING, "TRAILING") \
    MR_MACROS(TRUE_KEYWORD, "TRUE") /*The name differs from the value*/ \
    MR_MACROS(TRUNCATE, "TRUNCATE") \
    MR_MACROS(TTL, "TTL") \
    MR_MACROS(UNBOUNDED, "UNBOUNDED") \
    MR_MACROS(UNFREEZE, "UNFREEZE") \
    MR_MACROS(UNION, "UNION") \
    MR_MACROS(UPDATE, "UPDATE") \
    MR_MACROS(UUID, "UUID") \
    MR_MACROS(WEEK, "WEEK") \
    MR_MACROS(WHEN, "WHEN") \
    MR_MACROS(WHERE, "WHERE") \
    MR_MACROS(WITH_FILL, "WITH FILL") \
    MR_MACROS(WITH, "WITH") \
    MR_MACROS(WK, "WK") \
    MR_MACROS(WW, "WW") \
    MR_MACROS(YEAR, "YEAR") \
    MR_MACROS(YY, "YY") \
    MR_MACROS(YYYY, "YYYY") \
    MR_MACROS(PARTITIONS, "PARTITIONS") \
    MR_MACROS(EXCEPT_DATABASE, "EXCEPT DATABASE") \
    MR_MACROS(EXCEPT_DATABASES, "EXCEPT DATABASES") \
    MR_MACROS(EXCEPT_TABLE, "EXCEPT TABLE") \
    MR_MACROS(EXCEPT_TABLES, "EXCEPT TABLES") \
    MR_MACROS(DICTIONARY, "DICTIONARY") \
    MR_MACROS(VIEW, "VIEW") \
    MR_MACROS(TEMPORARY_TABLE, "TEMPORARY_TABLE") \
    MR_MACROS(DATABASE, "DATABASE") \
    MR_MACROS(ASYNC, "ASYNC") \
    MR_MACROS(SYNC, "SYNC") \
    MR_MACROS(BACKUP, "BACKUP") \
    MR_MACROS(RESTORE, "RESTORE") \
    MR_MACROS(CHECK_TABLE, "CHECK TABLE") \
    MR_MACROS(FUNCTION, "FUNCTION") \
    MR_MACROS(OR_REPLACE, "OR REPLACE") \
    MR_MACROS(CREATE, "CREATE") \
    MR_MACROS(GRANULARITY, "GRANULARITY") \
    MR_MACROS(INDEX, "INDEX") \
    MR_MACROS(TYPE, "TYPE") \
    MR_MACROS(EMPTY_AS, "EMPTY AS") \
    MR_MACROS(PERIODIC_REFRESH, "PERIODIC REFRESH") \
    MR_MACROS(WINDOW, "WINDOW") \
    MR_MACROS(WATERMARK, "WATERMARK") \
    MR_MACROS(STRICTLY_ASCENDING, "STRICTLY_ASCENDING") /*Underscore is intentional*/ \
    MR_MACROS(ALLOWED_LATENESS, "ALLOWED_LATENESS") /*Underscore is intentional*/ \
    MR_MACROS(POPULATE, "POPULATE") \
    MR_MACROS(TO_INNER_UUID, "TO INNER UUID") \
    MR_MACROS(CHECK, "CHECK") \
    MR_MACROS(ASSUME, "ASSUME") \
    MR_MACROS(CONSTRAINT, "CONSTRAINT") \
    MR_MACROS(PROJECTION, "PROJECTION") \
    MR_MACROS(PRIMARY_KEY, "PRIMARY KEY") \
    MR_MACROS(ENGINE, "ENGINE") \
    MR_MACROS(SAMPLE_BY, "SAMPLE BY") \
    MR_MACROS(ATTACH, "ATTACH") \
    MR_MACROS(TEMPORARY, "TEMPORARY") \
    MR_MACROS(INNER, "INNER") \
    MR_MACROS(LIVE, "LIVE") \
    MR_MACROS(EMPTY, "EMPTY") \
    MR_MACROS(TABLE_OVERRIDE, "TABLE OVERRIDE") \
    MR_MACROS(AUTO_INCREMENT, "AUTO INCREMENT") \
    MR_MACROS(NONE, "NONE") \
    MR_MACROS(DESCRIBE, "DESCRIBE") \
    MR_MACROS(FILESYSTEM_CACHE, "FILESYSTEM CACHE") \
    MR_MACROS(SOURCE, "SOURCE") \
    MR_MACROS(LIFETIME, "LIFETIME") \
    MR_MACROS(LAYOUT, "LAYOUT") \
    MR_MACROS(EXPRESSION, "EXPRESSION") \
    MR_MACROS(HIERARCHICAL, "HIERARCHICAL") \
    MR_MACROS(BIDIRECTIONAL, "BIDIRECTIONAL") \
    MR_MACROS(INJECTIVE, "INJECTIVE") \
    MR_MACROS(IS_OBJECT_ID, "IS_OBJECT_ID") /*Underscore is intentional*/ \
    MR_MACROS(PERMANENTLY, "PERMANENTLY") \
    MR_MACROS(NO_DELAY, "NO DELAY") \
    MR_MACROS(DETACH, "DETACH") \
    MR_MACROS(AST, "AST") \
    MR_MACROS(EXPLAIN, "EXPLAIN") \
    MR_MACROS(SYNTAX, "SYNTAX") \
    MR_MACROS(QUERY_TREE, "QUERY TREE") \
    MR_MACROS(PIPELINE, "PIPELINE") \
    MR_MACROS(PLAN, "PLAN") \
    MR_MACROS(ESTIMATE, "ESTIMATE") \
    MR_MACROS(CURRENT_TRANSACTION, "CURRENT TRANSACTION") \
    MR_MACROS(EXTERNAL_DDL_FROM, "EXTERNAL DDL FROM") \
    MR_MACROS(INSERT_INTO, "INSERT INTO") \
    MR_MACROS(FROM_INFILE, "FROM INFILE") \
    MR_MACROS(COMPRESSION, "COMPRESSION") \
    MR_MACROS(VALUES, "VALUES") \
    MR_MACROS(WATCH, "WATCH") \
    MR_MACROS(FORMAT, "FORMAT") \
    MR_MACROS(SELECT, "SELECT") \



enum class Keyword : size_t
{
#define DECLARE_PARSER_KEYWORD_ENUM(identifier, name) \
    identifier,

    APPLY_FOR_PARSER_KEYWORDS(DECLARE_PARSER_KEYWORD_ENUM)
#undef DECLARE_PARSER_KEYWORD_ENUM
};


const String & toStringRef(Keyword type);

const std::vector<String> & getAllKeyWords();


/** Parse specified keyword such as SELECT or compound keyword such as ORDER BY.
  * All case insensitive. Requires word boundary.
  * For compound keywords, any whitespace characters and comments could be in the middle.
  */
/// Example: ORDER/* Hello */BY
class ParserKeyword : public IParserBase
{
private:
    std::string_view s;

public:
    //NOLINTNEXTLINE Want to be able to init ParserKeyword("literal")
    constexpr ParserKeyword(std::string_view s_): s(s_) { assert(!s.empty()); }

    explicit ParserKeyword(Keyword keyword);

    constexpr const char * getName() const override { return s.data(); }

protected:
    bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;
};


class ParserToken : public IParserBase
{
private:
    TokenType token_type;
public:
    ParserToken(TokenType token_type_) : token_type(token_type_) {} /// NOLINT

protected:
    const char * getName() const override { return "token"; }

    bool parseImpl(Pos & pos, ASTPtr & /*node*/, Expected & expected) override
    {
        if (pos->type != token_type)
        {
            expected.add(pos, getTokenName(token_type));
            return false;
        }
        ++pos;
        return true;
    }
};


// Parser always returns true and do nothing.
class ParserNothing : public IParserBase
{
public:
    const char * getName() const override { return "nothing"; }

    bool parseImpl(Pos & /*pos*/, ASTPtr & /*node*/, Expected & /*expected*/) override { return true; }
};

}
